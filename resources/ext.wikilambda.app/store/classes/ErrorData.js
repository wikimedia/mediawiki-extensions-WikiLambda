/*!
 * WikiLambda ErrorData class
 *
 * @copyright 2020â€“ Abstract Wikipedia team; see AUTHORS.txt
 * @license MIT
 */
'use strict';

const Constants = require( '../../Constants.js' );

/**
 * ErrorData class contains information of the error message
 * to render in the SafeMessage.vue component (and other).
 * It wraps either a i18n message string with its required properties,
 * or a raw string obtained from non-safe origins (e.g. function inputs,
 * object labels, etc).
 *
 * @class
 * @property {string} messageKey
 * @property {Array} params
 * @property {string} message
 * @property {type} type
 */
class ErrorData {
	constructor( messageKey, params, message, type ) {
		this.messageKey = messageKey;
		this.params = params;
		this.message = message;
		this.type = type;
	}

	/**
	 * Returns the error message
	 *
	 * @return {string}
	 */
	get errorMessage() {
		return this.messageKey ?
			mw.message( this.messageKey ).params( this.params ).parse() :
			this.message;
	}

	/**
	 * Returns whether this error message can safely be
	 * injected as html, because its message will be generated by
	 * mw.message().params().parse(), which will escape any bad html.
	 *
	 * @return {boolean}
	 */
	get isSafeForHtml() {
		return !!this.messageKey;
	}

	/**
	 * Build a ErrorData object from an object containing either
	 * a raw message, or a message messageKey and its properties.
	 *
	 * @param {ErrorData|Object} errorPayload
	 * @param {string} errorPayload.errorMessage
	 * @param {string} errorPayload.errorMessageKey
	 * @param {Array} errorPayload.errorParams
	 * @param {string} errorPayload.errorType
	 * @return {ErrorData}
	 */
	static buildErrorData( errorPayload ) {
		// If already an instance, return
		if ( errorPayload instanceof ErrorData ) {
			return errorPayload;
		}

		const {
			errorMessage = null,
			errorMessageKey = null,
			errorParams = [],
			errorType = Constants.ERROR_TYPES.ERROR
		} = errorPayload;

		return errorMessageKey ?
			new ErrorData( errorMessageKey, errorParams, null, errorType ) :
			new ErrorData( null, [], errorMessage, errorType );
	}
}

module.exports = exports = ErrorData;
